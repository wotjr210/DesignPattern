Factoty Pattern

"new"는 "구상객체"를 뜻합니다.
-> new를 사용하는것은 구상 클래스의 인스턴스를 만든것입니다.
구생클래스로 구현시, 코드 수정해야할 가능성이 높아지고, 유연성이 떨어진다.
변화되는것때문에 new를 사용하는데 있어서 조심해한다. 인터페이스로 구현시,다형성덕분에 어떤클래스든 특정 인터페이스만 구현하면 사용하면됨


팩토르 메소드는 객체생성을 처리하며, 팩토리 메소드를 이용하면 객체를 생성하는 작업을 서브클래스에 캡슐화시킬 수있습니다.
수퍼클래스에 있는 클라이언트 코드와 서브클래스에 있는 객체 생성 코드를 분리.

<팩토리 메소드 형태>
abstract Product factoryMethod(String type);
1. 팩토리 메소드는 추상메소드로 선언, 서브클래스에서 객체생성.
2. 팩토리 메소드에서는 특정객체를 리턴하며, 그 객체는 보통 수퍼클래스에서 정의한 메소드 내에서 쓰임.
3. 클라이언트에서 실제로 생성되는 구상객체가 무엇인지 알수없게 만드는 역할(캡슐화)
4. 팩토리 메소드를 만들때 매개변수를 이용해 객체 종류를 선택가능.

Factory Methode Pattern에서는 서브 클래스에서 어떤 클래스를 만즐지 결정하게 함으로써 객체 생성을 캡슐화한다.

* 정의
팩토리 메소드 패턴에서는 객체를 생성하기위한 인터페이스를 정의하는데, 어떤 클래스의 인스턴스를 만들지 서브클래스에서 결정.
즉, 클래스의 인스턴스를 만드는일을 서브클래스에게 맡김.
결정한다 -> 서브클래스에서 어떤 클래스의 인스턴스를 만들지를 결정하기때문이 아니라, 상위클래스자체가 생성할 클래스에 대한 사전 시직이 전혀없이 만들어 지기때문.

객체의 의존성
객체의 인스턴스를 직접 만들면 구상 클래스에 의존해야함.
팩토리 메소드를 사용하지않고 객체를 직접 생성하면 해당 객체들에게 직접적으로 의존하게됨.

디자인원칙 [Dependenct Inversion Principle - 의존성 뒤집기 원칙]
추상화된 것에 의존하도록 만들어라. 구상 클래스에 의존하도록 만들지 않도록 한다.
고수준 구성요소가 저수준 구성요소에 의존하면 안되나는것을 내포하고, 항상 추상화에 의존하도록 만들어야함.
객체지향 디자인을 할 때 일반적으로 생각하는 방법과는 반대로, 뒤집어서 생각해야함.


가이드 라인
1. 어떤 변수에도 구상 클래스에 대한 레퍼런스를 저장하지말자. -> NEW 연산자를 사용하면 구상클래스에대한 레퍼런스를 사용하게됨, 팩토리를 써서 구상 클래스에 대한 레퍼런스를 변수에 저장하는일을 방지
2. 구상클래스에서 유도된 클래스를 만들지 말자. -> 구상 클래스에서 유도된 클래스를 만들면 특정 구상 클래스에 의존하게됨. 인터페이스나 추상클래스처럼 추상화된것으로 부터 클래스 생성
3. 베이스 클래스에서 이미 구현된 메소드를 오버라이드 하지 맙시다. -> 이미 구현되있는 메소드를 오버라이드 한다는것은 애초부터 베이스 클래스가 제대로 추상화된것이 아님.
                                                                      즉, 베이스에서 메소드 정의할때 모든 서브 클래스에서 공유할 수있는 것만 정의.

클래스가 바뀔 가능성이 있다면 팩토리 메소드 패턴과 같은 기법을서서 변경될수있는 부분을 캡슐화.


추상팩토리패턴
인터페이스를 이용하여 서로 연관된, 또는 의존하는 객체를 구상 클래스를 지정하지않고 생성가능.